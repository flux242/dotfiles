" vim: filetype=vifm :
" Sample configuration file for vifm (last updated: 21 January, 2018)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

" ------------------------------------------------------------------------------

" This is the actual command used to start vi.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.

set vicmd=vim
" set vicmd=elvis\ -G\ termcap
" set vicmd=vile

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower and doesn't support progress measuring.

set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.

set trash

" This is how many directories to store in the directory history.

set history=100

" Automatically resolve symbolic links on l or Enter.

set nofollowlinks

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).

" set fastrun

" Natural sort of (version) numbers within text.

set sortnumbers

" Maximum number of changes that can be undone.

set undolevels=100

" If you installed the vim.txt help file set vimhelp.
" If would rather use a plain text help file set novimhelp.

set novimhelp

" If you would like to run an executable file when you
" press return on the file name set this.

set norunexec

" Selected color scheme

colorscheme Default

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.

set timefmt=%m/%d\ %H:%M

" Show list of matches on tab completion in command-line mode

set wildmenu

" Display completions in a form of popup with descriptions of the matches

set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.

set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter

set ignorecase
set smartcase

" Don't highlight search results automatically

set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists

set scrolloff=4

" Don't do too many requests to slow file systems
set slowfs+=~/media/nas
set slowfs+=~/media/test
set slowfs+=~/media/dns325media

if !has('win')
    set slowfs=curlftpfs
endif

" Set custom status line look

set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "

" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]

mark b ~/bin/
mark h ~/

" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %c.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart

" ------------------------------------------------------------------------------

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" Pdf
filextype *.pdf zathura %c %i &, apvlv %c, xpdf %c
fileviewer *.pdf pdftotext -nopgbrk %c -

" PostScript
filextype *.ps,*.eps,*.ps.gz
        \ {View in zathura}
        \ zathura %f,
        \ {View in gv}
        \ gv %c %i &,

" Djvu
filextype *.djvu
        \ {View in zathura}
        \ zathura %f,
        \ {View in apvlv}
        \ apvlv %f,
" Chm
filextype *.chm xchm %f
 
" Audio
filetype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus
       \ {Play using ffplay}
       \ ffplay -nodisp -autoexit %c,
       \ {Play using MPlayer}
       \ mplayer %f,
" fileviewer *.mp3 mp3info
fileviewer *.wav,*.mp3,*.flac soxi

" Video
filextype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.as[fx]
        \ {View using mpv}
        \ mpv %f,
        \ {View using ffplay}
        \ ffplay -fs %f,
        \ {View using Dragon}
        \ dragon %f:p,
        \ {View using mplayer}
        \ mplayer %f,
fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx]
         \ ffprobe -pretty %c 2>&1 | awk '/Input #/{start=1}{if(start==1)print $0}'

" Web
filextype *.html,*.htm
        \ {Open with dwb}
        \ dwb %f %i &,
        \ {Open with firefox}
        \ firefox %f &,
        \ {Open with uzbl}
        \ uzbl-browser %f %i &,
filetype *.html,*.htm links, lynx

" Object
filetype *.o nm %f | less

" Man page
filetype *.[1-8] man ./%c
fileviewer *.[1-8] man ./%c | col -b

" Images
filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm,*.webp
        \ {View in sxiv}
        \ sxiv -a %f,
        \ {View in gpicview}
        \ gpicview %c,
        \ {View in shotwell}
        \ shotwell,
fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
         \ img2sixel -S -w $((%pw*11)) %c %pd %pc clear,
         \ convert -identify %f -verbose /dev/null

" OpenRaster
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,

" Mindmap
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" GPG signature
filetype *.asc
       \ {Check signature}
       \ !!gpg --verify %c,

" Torrent
filetype *.torrent ktorrent %f &
fileviewer *.torrent dumptorrent -v %c

" FuseZipMount
"filetype *.zip,*.jar,*.war,*.ear,*.oxt,*.apkg
filetype *.zip,*.war,*.ear,*.oxt,*.apkg
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ zip -sf %c | less,
       \ {Extract here}
       \ tar -xf %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c

" ArchiveMount
filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,
         \*.xz,*.iso,*.deb,*.apk,*.ipk,*.jar,*.oxz,*.epub
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.txz,*.txz xz --list %c
fileviewer *.tar tar -tf %c

" Rar2FsMount and rar archives
filetype *.rar
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs --iob-size=64 %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.rar unrar v %c

" IsoMount
"filetype *.iso,*.bin
"       \ {Mount with fuseiso}
"       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" Fuse7z and 7z archives
filetype *.7z
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.7z 7z l %c

" AppImage fuse mount
filetype *.AppImage
       \ {Mount with squashfuse}
       \ FUSE_MOUNT|/home/alex/bin/mountappimage.sh %SOURCE_FILE %DESTINATION_DIR,

" squashfs fuse mount
filetype *.squashfs
       \ {Mount with squashfuse}
       \ FUSE_MOUNT|squashfuse %SOURCE_FILE %DESTINATION_DIR,

" Office files
filextype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx libreoffice %f &
fileviewer *.doc catdoc %c
fileviewer *.docx, docx2txt.pl %f -

" TuDu files
filetype *.tudu tudu -f %c

" Qt projects
filextype *.pro qtcreator %f &

" Directories
filextype */
        \ {View in thunar}
        \ Thunar %f &,


"highlight --style olive -O xterm256
fileviewer *.[ch],*.[ch]pp,*.md,*.markdown,*.js,*.json,*.java,
           \Makefile,Makefile.*,*.patch,*.diff,
           \*.html,*.htm,*.css,*.xml,*.py,*.pl,*.hex,*.cs,*.lua
           \ highlight -O xterm256 -s olive %c

fileviewer *.sh,.bash*,.dircolors,.profile highlight -O xterm256 -s olive --syntax bash %c
fileviewer .vimrc,*.vim highlight -O xterm256 -s olive --syntax bash %c
fileviewer *.conf,*.ini,*.desktop highlight -O xterm256 -s olive --syntax conf %c
fileviewer *.gpx,*.kml highlight -O xterm256 -s olive --syntax xml %c
fileviewer CmakeLists.txt highlight -O xterm256 -s olive --syntax cmake %c
           
" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For *nix:
" filetype * xdg-open
" For OS X:
" filetype * open
" For Windows:
" filetype * start, explorer

" ------------------------------------------------------------------------------

" What should be saved automatically between vifm runs
" Like in previous versions of vifm
" set vifminfo=options,filetypes,commands,bookmarks,dhistory,state,cs
" Like in vi
set vifminfo=savedirs,chistory,state,tui,shistory,
    \fhistory,dirstack,registers,bookmarks,bmarks
"set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
"    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
" filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/

" ------------------------------------------------------------------------------

" Sample mappings

" Start shell in current directory
nnoremap s :shell<cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Open file in existing instance of gvim
nnoremap o :!gvim --remote-tab-silent %f<cr>
" Open file in new instance of gvim
nnoremap O :!gvim %f<cr>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

" Yank current directory path into the clipboard
nnoremap yd :!echo %d | xclip %i<cr>

" Yank current file path into the clipboard
nnoremap yf :!echo %c:p | xclip %i<cr>

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" Open console in current directory
nnoremap ,t :!xterm &<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart<cr>
" Open gvim to edit vifmrc
nnoremap ,C :!gvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" Go home
nnoremap H :cd<cr>

" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg=ag\ --line-numbers\ %i\ %a\ %s

" Add additional place to look for executables
"
" let $PATH=$HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>


" Classification

" file types
set classify=' :dir:/, :exe:, :link:'
" various file names
set classify+=' ::../::'
set classify+=' ::*.go::, ::*.java::, ::*.scala::, ::*.rb::, ::*.php::, ::*.coffee::, ::*.json::, ::*.lua::, ::*.diff::, ::*.cs::, ::*.js::'
set classify+=' ::*.sh,,*.awk,,*.sed,,*.less::'
set classify+=' ::*.pl::'
set classify+=' ::*.[hc]pp,,*.cc,,*.cxx::, ::*.[hc]::'
set classify+=' ::*.htm,,*.html,,*.xml,,*.sgml::, ::*.css::'
set classify+=' ::*.py,,*.pyc,,*.pyo,,*.pyd::'
set classify+=' ::*.conf,,*.ini,,*.yml::'
set classify+=' ::*.sln,,*.suo::'
set classify+=' ::*.twig::'
set classify+=' ::*.db,,*.sqlite::'
set classify+='© ::/^copying|license$/::'
set classify+=' ::.git/,,*.git/::'
set classify+=' ::*.epub,,*.fb2,,*.djvu,,*.pdf,,*.chm::'
set classify+=' ::*.md,,*.markdown::'
" archives
set classify+=' ::*.7z,,*.ace,,*.arj,,*.apk,,*.bz2,,*.cpio,,*.deb,,*.dz,,*.gz,,*.jar,,*.lzh,,*.lzma,,*.rar,,*.rpm,,*.rz,,*.tar,,*.taz,,*.tb2,,*.tbz,,*.tbz2,,*.tgz,,*.tlz,,*.trz,,*.txz,,*.tz,,*.tz2,,*.xz,,*.z,,*.Z,,*.zip,,*.zoo::'
" images
"set classify+=' ::*.bmp,,*.gif,,*.jpeg,,*.jpg,,*.ico,,*.png,,*.ppm,,*.svg,,*.svgz,,*.tga,,*.tif,,*.tiff,,*.xbm,,*.xcf,,*.xpm,,*.xspf,,*.xwd::'
set classify+=' ::*.bmp,,*.gif,,*.jpeg,,*.jpg,,*.ico,,*.png,,*.ppm,,*.svg,,*.svgz,,*.tga,,*.tif,,*.tiff,,*.xbm,,*.xcf,,*.xpm,,*.xspf,,*.xwd::'

" audio
set classify+=' ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m3u,,*.m4a,,*.mid,,*.midi,,*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::'
" media
set classify+=' ::*.avi,,*.ts,,*.axv,,*.divx,,*.m2v,,*.m4p,,*.m4v,,.mka,,*.mkv,,*.mov,,*.mp4,,*.flv,,*.mp4v,,*.mpeg,,*.mpg,,*.nuv,,*.ogv,,*.pbm,,*.pgm,,*.qt,,*.vob,,*.wmv,,*.xvid::'
" office files
set classify+=' ::*.doc,,*.docx::, ::*.xls,,*.xls[mx]::, ::*.pptx,,*.ppt::'
set classify+=' :reg:'
set classify+=' ::*.iso::'

" hide side borders
set tuioptions-=s
if $TERM != 'linux'
    " use Unicode ellipsis
    set tuioptions+=u
endif

" change appearance of middle border
" set fillchars=vborder:·
set fillchars=vborder:▕

" clears the sixel picture preview correctly
set previewoptions=hardgraphicsclear

" custom status line look

" don't display file user/group on Windows
if !has('win')
    let $RIGHTS = '%[%u:%g%]'
endif

highlight Border cterm=none ctermfg=81 ctermbg=none
highlight TopLine cterm=none ctermfg=black ctermbg=81

highlight User1 ctermbg=81
highlight User2 ctermbg=25 ctermfg=81 cterm=bold
highlight User3 ctermbg=25 ctermfg=81
highlight User4 ctermbg=81 ctermfg=25

let $VIFMRC_HAS_RICH_FONT = 'yes'
if $VIFMRC_HAS_RICH_FONT
    let &statusline = ''
    if $SL_PREFIX != ''
        let &statusline = '%2*'.$SL_PREFIX.'%4*'
    endif
    let &statusline .= '%2*'           " left separator
    let &statusline .= ' %t '          " file name
"    let &statusline .= '%1*'             " left separator
    let &statusline .= '%4*%1*'             " left separator
    let &statusline .= '%='            " fill the whole status line
    let &statusline .= ''             " right separator
    let &statusline .= ' %A '          " file attributes
    let &statusline .= '%4*%2*'       " right separator
    let &statusline .= ' '.$RIGHTS.' ' " user and group owners of the file
    let &statusline .= '%3*%1*'       " right separator
    let &statusline .= ' %d '         " human readable cumulative file size
    let &statusline .= '%4*%2*'       " right separator
    let &statusline .= ' %5E '          " file modification date and time
else
    let &statusline = ' '
    if $SL_PREFIX != ''
        let &statusline .= $SL_PREFIX.'| '
    endif
    let &statusline .= '%t%= %A '.$RIGHTS.'%15E %20d '
endif

" ignore .git directory on :find
set findprg='find %s %a -print ,
            \ -type d \( ! -readable -o ! -executable -o -path "*/.git" \)
            \ -prune'

nnoremap <f2> :rename<cr>

" To remember commands
" gv - restore selection

"   (      go to previous group.  Groups are defined by primary sorting key.  For name and iname members of each group
"          have same first letter, for all other sorting keys vifm uses size, uid, ...
"   )      go to next group.  See ( key description above.
"   {      similar  to ( key, but always considers whether entry is file or directory and thus speeds up navigation to
"          closest previous entry of the opposite type.
"   }      same as {, but in forward direction

" b  - interpret content of the menu as list of paths and use it to create custom view in place of previously active
"      pane.  See "Custom views" section below.
" B - same as above, but creates unsorted view.

